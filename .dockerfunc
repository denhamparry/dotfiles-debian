#!/bin/bash

export DOCKER_REPO_PREFIX=denhamparry

dcleanup(){
	local containers
	mapfile -t containers < <(docker ps -aq 2>/dev/null)
	docker rm "${containers[@]}" 2>/dev/null
	local volumes
	mapfile -t volumes < <(docker ps --filter status=exited -q 2>/dev/null)
	docker rm -v "${volumes[@]}" 2>/dev/null
	local images
	mapfile -t images < <(docker images --filter dangling=true -q 2>/dev/null)
	docker rmi "${images[@]}" 2>/dev/null
}
del_stopped(){
	local name=$1
	local state
	state=$(docker inspect --format "{{.State.Running}}" "$name" 2>/dev/null)

	if [[ "$state" == "false" ]]; then
		docker rm "$name"
	fi
}
rmctr(){
	# shellcheck disable=SC2068
	docker rm -f $@ 2>/dev/null || true
}
relies_on(){
	for container in "$@"; do
		local state
		state=$(docker inspect --format "{{.State.Running}}" "$container" 2>/dev/null)

		if [[ "$state" == "false" ]] || [[ "$state" == "" ]]; then
			echo "$container is not running, starting it for you."
			$container
		fi
	done
}

terraform(){
	docker run -it --rm \
		-v "${HOME}:${HOME}:ro" \
		-v "$(pwd):/usr/src/repo" \
		-v /tmp:/tmp \
		--workdir /usr/src/repo \
		--log-driver none \
		-e GOOGLE_APPLICATION_CREDENTIALS \
		-e SSH_AUTH_SOCK \
		${DOCKER_REPO_PREFIX}/terraform "$@"
}

aws(){
	docker run --rm -it \
	-v "${HOME}/.aws/:${HOME}/.aws/:rw" \
	amazon/aws-cli "$@"
}

# terragrunt(){
# 	docker run -it --rm \
# 		-v "${HOME}:${HOME}:ro" \
# 		-v "$(pwd):/apps" \
# 		-v /tmp:/tmp \
# 		--workdir /apps \
# 		--log-driver none \
# 		-e GOOGLE_APPLICATION_CREDENTIALS \
# 		-e SSH_AUTH_SOCK \
# 		${DOCKER_REPO_PREFIX}/terragrunt:v0.23.30 "$@"
# }
